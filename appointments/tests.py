# File: tests.py
# Description: Autogenerated file from the "django-admin startapp" facility - modified for the specific
#              application "panda/appointments"
# Author: Chris Knowles
# Date: Jun 2023


import unittest
from helpers import is_valid_nhs_number, coerce_postcode


# Create your tests here.

# TestCases
class TestHelpers(unittest.TestCase):
    """
    Test fixture to exercise the helper functions from the helpers.py script
    """
    def setUp(self):
        """
        :summary: Set up run before every test case

        :return: None
        """
        pass

    def test_coerce_postcode_with_correct_whitespace_2(self):
        """
        :summary: Test case to coerce a postcode (2 character Outward code) with
        correct whitespace between Outward and Inward codes to correct form

        :return: None
        """

        # Arrange
        input_postcode = "W4 7KL"
        expect_postcode = "W4 7KL"

        # Act
        result = coerce_postcode(input_postcode)

        # Assert
        self.assertEqual(expect_postcode, result,
                         f"Test failed, expected postcode: {expect_postcode} got postcode: {result}")

    def test_coerce_postcode_with_correct_whitespace_3(self):
        """
        :summary: Test case to coerce a postcode (3 character Outward code) with
        correct whitespace between Outward and Inward codes to correct form

        :return: None
        """

        # Arrange
        input_postcode = "NE3 2HT"
        expect_postcode = "NE3 2HT"

        # Act
        result = coerce_postcode(input_postcode)

        # Assert
        self.assertEqual(expect_postcode, result,
                         f"Test failed, expected postcode: {expect_postcode} got postcode: {result}")

    def test_coerce_postcode_with_correct_whitespace_4(self):
        """
        :summary: Test case to coerce a postcode (4 character Outward code) with
        correct whitespace between Outward and Inward codes to correct form

        :return: None
        """

        # Arrange
        input_postcode = "SR11 0DD"
        expect_postcode = "SR11 0DD"

        # Act
        result = coerce_postcode(input_postcode)

        # Assert
        self.assertEqual(expect_postcode, result,
                         f"Test failed, expected postcode: {expect_postcode} got postcode: {result}")

    def test_coerce_postcode_no_whitespace_2(self):
        """
        :summary: Test case to coerce a postcode (2 character Outward code) with no
        whitespace anywhere to correct form

        :return: None
        """
        # Arrange
        input_postcode = "W47KL"
        expect_postcode = "W4 7KL"

        # Act
        result = coerce_postcode(input_postcode)

        # Assert
        self.assertEqual(expect_postcode, result,
                         f"Test failed, expected postcode: {expect_postcode} got postcode: {result}")

    def test_coerce_postcode_no_whitespace_3(self):
        """
        :summary: Test case to coerce a postcode (3 character Outward code) with no
        whitespace anywhere to correct form

        :return: None
        """
        # Arrange
        input_postcode = "NE32HT"
        expect_postcode = "NE3 2HT"

        # Act
        result = coerce_postcode(input_postcode)

        # Assert
        self.assertEqual(expect_postcode, result,
                         f"Test failed, expected postcode: {expect_postcode} got postcode: {result}")

    def test_coerce_postcode_no_whitespace_4(self):
        """
        :summary: Test case to coerce a postcode (4 character Outward code) with no
        whitespace anywhere to correct form

        :return: None
        """
        # Arrange
        input_postcode = "SR110DD"
        expect_postcode = "SR11 0DD"

        # Act
        result = coerce_postcode(input_postcode)

        # Assert
        self.assertEqual(expect_postcode, result,
                         f"Test failed, expected postcode: {expect_postcode} got postcode: {result}")

    def test_coerce_postcode_with_much_whitespace_2(self):
        """
        :summary: Test case to coerce a postcode (2 character Outward code) with much
        whitespace to correct form

        :return: None
        """
        # Arrange
        input_postcode = " W 4 7 KL "
        expect_postcode = "W4 7KL"

        # Act
        result = coerce_postcode(input_postcode)

        # Assert
        self.assertEqual(expect_postcode, result,
                         f"Test failed, expected postcode: {expect_postcode} got postcode: {result}")

    def test_coerce_postcode_with_much_whitespace_2(self):
        """
        :summary: Test case to coerce a postcode (3 character Outward code) with much
        whitespace to correct form

        :return: None
        """
        # Arrange
        input_postcode = " N E3 2 H T"
        expect_postcode = "NE3 2HT"

        # Act
        result = coerce_postcode(input_postcode)

        # Assert
        self.assertEqual(expect_postcode, result,
                         f"Test failed, expected postcode: {expect_postcode} got postcode: {result}")

    def test_coerce_postcode_with_much_whitespace_3(self):
        """
        :summary: Test case to coerce a postcode (4 character Outward code) with much
        whitespace to correct form

        :return: None
        """
        # Arrange
        input_postcode = "S R 11 0 D D "
        expect_postcode = "SR11 0DD"

        # Act
        result = coerce_postcode(input_postcode)

        # Assert
        self.assertEqual(expect_postcode, result,
                         f"Test failed, expected postcode: {expect_postcode} got postcode: {result}")

    def test_is_valid_nhs_number_false_short(self):
        """
        :summary: Test case to check for invalid NHS number validating to False
        because the NHS number is too short

        :return: None
        """

        # Arrange
        nhs_number = "12345678"

        # Act
        result = is_valid_nhs_number(nhs_number)

        # Assert
        self.assertFalse(result, f"Test failed for {nhs_number}, expected result of False")

    def test_is_valid_nhs_number_false_long(self):
        """
        :summary: Test case to check for invalid NHS number validating to False
        because the NHS number is too long

        :return: None
        """

        # Arrange
        nhs_number = "12345678901112"

        # Act
        result = is_valid_nhs_number(nhs_number)

        # Assert
        self.assertFalse(result, f"Test failed for {nhs_number}, expected result of False")

    def test_is_valid_nhs_number_false_non_digits(self):
        """
        :summary: Test case to check for invalid NHS number validating to False
        because the NHS number contains non-digit characters

        :return: None
        """

        # Arrange
        nhs_number = "12X456789 "

        # Act
        result = is_valid_nhs_number(nhs_number)

        # Assert
        self.assertFalse(result, f"Test failed for {nhs_number}, expected result of False")

    def test_is_valid_nhs_number_false_checksum(self):
        """
        :summary: Test case to check for invalid NHS number validating to False
        because the NHS number has the wrong checksum

        :return: None
        """

        # Arrange
        nhs_number = "4848030915"

        # Act
        result = is_valid_nhs_number(nhs_number)

        # Assert
        self.assertFalse(result, f"Test failed for {nhs_number}, expected result of False")

    def test_is_valid_nhs_number_true(self):
        """
        :summary: Test case to check for valid NHS numbers all validating to True

        :return: None
        """

        # Arrange
        nhs_numbers = [nhsn["nhs_number"] for nhsn in sample_patients]

        # Act
        # All NHS numbers held in the nhs_numbers list should be valid
        for nhs_number in nhs_numbers:
            result = is_valid_nhs_number(nhs_number)

            # Assert
            self.assertTrue(result, f"Test failed for {nhs_number}, expected result of True")


# class TestViews(unittest.TestCase):
#     """
#     Test fixture to exercise the view functions - note there must be the local
#     Django HTTP server running at localhost (127.0.0.1) and listening on port
#     12864 or all these tests will fail
#     """
#     def setUp(self):
#         """
#         :summary: Set up run before every test case - this requires a restored
#         database
#
#         :return: None
#         """
#         # Department.clean()
#         # Clinician.clean()
#         # Patient.clean()
#         Appointment.clean()
#
#     def test_create_patient(self):
#         """
#         :summary: Test case to create a properly formed patient instance in the
#         database
#
#         :return: None
#         """
#
#         # Arrange
#
#         # Act
#
#         # Assert
#         self.assertEqual(input_data, expected_data,
#                          f"Test failed, expected: {expected_data} but got postcode: {result}")


if __name__ == "__main__":
    unittest.main()
